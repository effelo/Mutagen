<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mutagen.Bethesda.Fallout4</name>
    </assembly>
    <members>
        <member name="T:Mutagen.Bethesda.Fallout4.IAmbientColorsCommon">
            <summary>
            Interface for ambient color definitions.
            Implemented by: [AmbientColors, CellLighting]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAmbientColorsCommonGetter">
            <summary>
            Interface for ambient color definitions.
            Implemented by: [AmbientColors, CellLighting]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IBoundableEquipment">
            <summary>
            Used for specifying which records are allowed in a MagicEffect referencing Bound Equipment spells
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IHarvestable">
            <summary>
            Common interface for records that can be harvested
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IHarvestableGetter">
            <summary>
            Common interface for records that can be harvested
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IHasIcons">
            <summary>
            Common interface for records that have icons
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IHasIconsGetter">
            <summary>
            Common interface for records that have icons
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IModeled">
            <summary>
            Common interface for records that have a model
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IModeledGetter">
            <summary>
            Common interface for records that have a model
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IObjectBounded">
            <summary>
            Common interface for records that physical bounds
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IObjectBoundedGetter">
            <summary>
            Common interface for records that physical bounds
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IObjectBoundedOptional">
            <summary>
            Common interface for records that physical bounds
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IObjectBoundedOptionalGetter">
            <summary>
            Common interface for records that physical bounds
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlaced">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject, APlaced, APlacedTrap]
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.IPlaced.DisableType.SafeDisable">
            <summary>
            Safest way to disable a placed entity. This will flag the record as Initially Disabled, set the
            Enable Parent to be opposite of the Player (ensuring this remains permanently disabled) and also
            sets the Z-Offset to -30000 (Object is completely moved completely far away i.e. Not visible in
            Creation Kit)
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.IPlaced.DisableType.DisableWithoutZOffset">
            <summary>
            Flags the record as Initially Disabled and set the Enable Parent opposite to the Player reference,
            to keep it permanently disabled. Z-Offset will be unchanged (e.g. You may want this if there is an
            attached package and needs player to be nearby to trigger it)
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.IPlaced.DisableType.JustInitiallyDisabled">
            <summary>
            Simply flags the record as Initially Disabled.
            </summary>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.IPlaced.Disable(Mutagen.Bethesda.Fallout4.IPlaced.DisableType)">
            <summary>
            Allows to easily disable placed records. Specify <paramref name="disableType"/> to further designate
            how the record should be disabled.
            </summary>
            <param name="disableType">How the record should be disabled</param>
            <returns>Returns true if the disable operation has succeeded, false otherwise.</returns>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlacedGetter">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject, APlaced, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ATopicReference">
            <summary>
            Implemented by: [TopicReference, TopicReferenceSubtype]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Internals.FurnitureBinaryCreateTranslation">
            <summary>
            Parsing for Furniture is fairly custom.  The 2nd flags subrecord has sit booleans, which are combined with both the
            'Markers' list and the 'Marker Entry Points' list from the binary data into one list of objects to be exposed
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.AVirtualMachineAdapter">
            <summary>
            Implemented by: [VirtualMachineAdapter, DialogResponsesAdapter, PackageAdapter, PerkAdapter, QuestAdapter, SceneAdapter]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Condition">
            <summary>
            Implemented by: [ConditionGlobal, ConditionFloat]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ConditionData">
            <summary>
            Implemented by: [FunctionConditionData, GetEventData]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ScriptProperty">
            <summary>
            Implemented by: [ScriptObjectProperty, ScriptStringProperty, ScriptIntProperty, ScriptFloatProperty, ScriptBoolProperty, ScriptObjectListProperty, ScriptStringListProperty, ScriptIntListProperty, ScriptFloatListProperty, ScriptBoolListProperty]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ANavigationMesh">
            <summary>
            Implemented by: [WorldspaceNavigationMesh, CellNavigationMesh]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANavigationMesh">
            <summary>
            Implemented by: [WorldspaceNavigationMesh, CellNavigationMesh]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANavigationMeshGetter">
            <summary>
            Implemented by: [WorldspaceNavigationMesh, CellNavigationMesh]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.APackageData">
            <summary>
            Implemented by: [PackageDataBool, PackageDataInt, PackageDataFloat, PackageDataObjectList, PackageDataLocation, PackageDataTarget, PackageDataTopic]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.APackageTarget">
            <summary>
            Implemented by: [PackageTargetSpecificReference, PackageTargetObjectID, PackageTargetObjectType, PackageTargetReference, PackageTargetAlias, PackageTargetUnknown, PackageTargetSelf]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.APerkEntryPointEffect">
            <summary>
            An abstract class representing a Perk entry point effect.
            Implemented by: [PerkEntryPointModifyValue, PerkEntryPointAddRangeToValue, PerkEntryPointModifyActorValue, PerkEntryPointAbsoluteValue
            PerkEntryPointAddLeveledItem, PerkEntryPointAddActivateChoice, PerkEntryPointSelectSpell, PerkEntryPointSelectText, PerkEntryPointSetText]
            </summary>
            <summary>
            Implemented by: [PerkEntryPointModifyValue, PerkEntryPointAddRangeToValue, PerkEntryPointModifyActorValue, PerkEntryPointAbsoluteValue, PerkEntryPointAddLeveledItem, PerkEntryPointAddActivateChoice, PerkEntryPointSelectSpell, PerkEntryPointSelectText, PerkEntryPointSetText]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.APlaced">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.APlaced.Disable">
            <summary>
            Disables the placed object using standard undelete and disable procedure. This will flag the record <br/>
            as Initially Disabled, set the Enable Parent to be opposite of the Player and set the Z-Offset to
            -30000.
            </summary>
            <returns>True if the disable was successful.</returns>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.APlacedTrap">
            <summary>
            Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.AStoryManagerNode">
            <summary>
            Implemented by: [StoryManagerBranchNode, StoryManagerQuestNode, StoryManagerEventNode]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.GameSetting">
            <summary>
            Implemented by: [GameSettingInt, GameSettingFloat, GameSettingString, GameSettingBool]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IGlobalGetter">
            <summary>
            Implemented by: [GlobalInt, GlobalShort, GlobalFloat]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Global">
            <summary>
            Implemented by: [GlobalInt, GlobalShort, GlobalFloat]
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.LandscapeTexture.Flag.IsSnow">
            <summary>
            SSE Only
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.MagicEffectArchetype">
            <summary>
            Implemented by: [MagicEffectLightArchetype, MagicEffectBoundArchetype, MagicEffectNpcArchetype, MagicEffectGuideArchetype, MagicEffectSpawnHazardArchetype, MagicEffectSpellArchetype, MagicEffectWerewolfArchetype, MagicEffectVampireArchetype, MagicEffectEnchantmentArchetype, MagicEffectKeywordArchetype]
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.MaterialObject.Flag.Snow">
            <summary>
            SSE only
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.MusicType.Flag.DoesNotQueue">
            <summary>
            SSE only
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.NpcConfiguration.Flag">
            <summary>
            Flags for NpcConfiguration
            - PcLevelMult is disabled/hidden, as that functionality is exposed via a customizedNpcConfiguration's Level field.
              Instantiate either a NpcLevel or PcLevelMult object to specify what type you want.
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Phoneme.Slot">
            <summary>
            Enum representing the different phonemes a weight set can be applied to
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.PlacedObject.StaticMajorFlag">
            <summary>
            Used when Placed Object refers to:
            [Activator, Static, Tree]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.PlacedObject.ContainerMajorFlag">
            <summary>
            Used when Placed Object refers to: [Container]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.PlacedObject.DoorMajorFlag">
            <summary>
            Used when Placed Object refers to: [Door]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.PlacedObject.LightMajorFlag">
            <summary>
            Used when Placed Object refers to: [Light]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.PlacedObject.MoveableStaticMajorFlag">
            <summary>
            Used when Placed Object refers to: [MoveableStatic]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.PlacedObject.AddonNodeMajorFlag">
            <summary>
            Used when Placed Object refers to: [AddonNode]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.PlacedObject.ItemMajorFlag">
            <summary>
            Used when Placed Object refers to:
            [Ingestible, Scroll, Ammunition, Ingredient, Key, MiscItem, SoulGem, Weapon]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.RegionData">
            <summary>
            Implemented by: [RegionSounds, RegionMap, RegionObjects, RegionWeather, RegionGrasses, RegionLand]
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.Water.Flag.EnableFlowmap">
            <summary>
            SSE only
            </summary>
        </member>
        <member name="F:Mutagen.Bethesda.Fallout4.Water.Flag.BlendNormals">
            <summary>
            SSE only
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Fallout4MajorRecord">
            <summary>
            Implemented by: [AcousticSpace, ActionRecord, Activator, ActorValueInformation, AddonNode, AlchemicalApparatus, Ammunition, AnimatedObject, Armor, ArmorAddon, ArtObject, ASpell, AssociationType, BodyPartData, Book, CameraPath, CameraShot, Cell, Class, Climate, CollisionLayer, ColorRecord, CombatStyle, ConstructibleObject, Container, Debris, DefaultObjectManager, DialogBranch, DialogResponses, DialogTopic, DialogView, Door, DualCastData, EffectShader, EncounterZone, EquipType, Explosion, Eyes, Faction, Flora, Footstep, FootstepSet, FormList, Furniture, GameSetting, Global, Grass, Hair, Hazard, HeadPart, IdleAnimation, IdleMarker, ImageSpace, ImageSpaceAdapter, Impact, ImpactDataSet, Ingestible, Ingredient, Key, Keyword, Landscape, LandscapeTexture, LensFlare, LeveledItem, LeveledNpc, Light, LightingTemplate, LoadScreen, Location, LocationReferenceType, MagicEffect, MaterialObject, MaterialType, Message, MiscItem, MoveableStatic, MovementType, MusicTrack, MusicType, ANavigationMesh, NavigationMeshInfoMap, Npc, ObjectEffect, Outfit, Package, Perk, APlaced, Projectile, Quest, Race, Region, Relationship, ReverbParameters, Scene, Scroll, ShaderParticleGeometry, SoulGem, SoundCategory, SoundDescriptor, SoundMarker, SoundOutputModel, Static, AStoryManagerNode, TalkingActivator, TextureSet, Tree, VisualEffect, VoiceType, VolumetricLighting, Water, Weapon, Weather, WordOfPower, Worldspace]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IFallout4MajorRecord">
            <summary>
            Implemented by: [AcousticSpace, ActionRecord, Activator, ActorValueInformation, AddonNode, AlchemicalApparatus, Ammunition, AnimatedObject, Armor, ArmorAddon, ArtObject, ASpell, AssociationType, BodyPartData, Book, CameraPath, CameraShot, Cell, Class, Climate, CollisionLayer, ColorRecord, CombatStyle, ConstructibleObject, Container, Debris, DefaultObjectManager, DialogBranch, DialogResponses, DialogTopic, DialogView, Door, DualCastData, EffectShader, EncounterZone, EquipType, Explosion, Eyes, Faction, Flora, Footstep, FootstepSet, FormList, Furniture, GameSetting, Global, Grass, Hair, Hazard, HeadPart, IdleAnimation, IdleMarker, ImageSpace, ImageSpaceAdapter, Impact, ImpactDataSet, Ingestible, Ingredient, Key, Keyword, Landscape, LandscapeTexture, LensFlare, LeveledItem, LeveledNpc, Light, LightingTemplate, LoadScreen, Location, LocationReferenceType, MagicEffect, MaterialObject, MaterialType, Message, MiscItem, MoveableStatic, MovementType, MusicTrack, MusicType, ANavigationMesh, NavigationMeshInfoMap, Npc, ObjectEffect, Outfit, Package, Perk, APlaced, Projectile, Quest, Race, Region, Relationship, ReverbParameters, Scene, Scroll, ShaderParticleGeometry, SoulGem, SoundCategory, SoundDescriptor, SoundMarker, SoundOutputModel, Static, AStoryManagerNode, TalkingActivator, TextureSet, Tree, VisualEffect, VoiceType, VolumetricLighting, Water, Weapon, Weather, WordOfPower, Worldspace]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IFallout4MajorRecordGetter">
            <summary>
            Implemented by: [AcousticSpace, ActionRecord, Activator, ActorValueInformation, AddonNode, AlchemicalApparatus, Ammunition, AnimatedObject, Armor, ArmorAddon, ArtObject, ASpell, AssociationType, BodyPartData, Book, CameraPath, CameraShot, Cell, Class, Climate, CollisionLayer, ColorRecord, CombatStyle, ConstructibleObject, Container, Debris, DefaultObjectManager, DialogBranch, DialogResponses, DialogTopic, DialogView, Door, DualCastData, EffectShader, EncounterZone, EquipType, Explosion, Eyes, Faction, Flora, Footstep, FootstepSet, FormList, Furniture, GameSetting, Global, Grass, Hair, Hazard, HeadPart, IdleAnimation, IdleMarker, ImageSpace, ImageSpaceAdapter, Impact, ImpactDataSet, Ingestible, Ingredient, Key, Keyword, Landscape, LandscapeTexture, LensFlare, LeveledItem, LeveledNpc, Light, LightingTemplate, LoadScreen, Location, LocationReferenceType, MagicEffect, MaterialObject, MaterialType, Message, MiscItem, MoveableStatic, MovementType, MusicTrack, MusicType, ANavigationMesh, NavigationMeshInfoMap, Npc, ObjectEffect, Outfit, Package, Perk, APlaced, Projectile, Quest, Race, Region, Relationship, ReverbParameters, Scene, Scroll, ShaderParticleGeometry, SoulGem, SoundCategory, SoundDescriptor, SoundMarker, SoundOutputModel, Static, AStoryManagerNode, TalkingActivator, TextureSet, Tree, VisualEffect, VoiceType, VolumetricLighting, Water, Weapon, Weather, WordOfPower, Worldspace]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.Fallout4Release">
            <summary>
            Different game release versions a Fallout4 mod can have
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ICondition">
            <summary>
            Implemented by: [ConditionGlobal, ConditionFloat]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IConditionGetter">
            <summary>
            Implemented by: [ConditionGlobal, ConditionFloat]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IConditionData">
            <summary>
            Implemented by: [FunctionConditionData, GetEventData]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IConditionDataGetter">
            <summary>
            Implemented by: [FunctionConditionData, GetEventData]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.OwnerTarget">
            <summary>
            Implemented by: [NpcOwner, FactionOwner, NoOwner]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IOwnerTarget">
            <summary>
            Implemented by: [NpcOwner, FactionOwner, NoOwner]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IOwnerTargetGetter">
            <summary>
            Implemented by: [NpcOwner, FactionOwner, NoOwner]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ALocationTarget">
            <summary>
            Implemented by: [LocationTarget, LocationCell, LocationObjectId, LocationObjectType, LocationKeyword, LocationFallback]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IALocationTarget">
            <summary>
            Implemented by: [LocationTarget, LocationCell, LocationObjectId, LocationObjectType, LocationKeyword, LocationFallback]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IALocationTargetGetter">
            <summary>
            Implemented by: [LocationTarget, LocationCell, LocationObjectId, LocationObjectType, LocationKeyword, LocationFallback]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.SimpleModel">
            <summary>
            Implemented by: [Model]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ISimpleModel">
            <summary>
            Implemented by: [Model]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ISimpleModelGetter">
            <summary>
            Implemented by: [Model]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IATopicReference">
            <summary>
            Implemented by: [TopicReference, TopicReferenceSubtype]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IATopicReferenceGetter">
            <summary>
            Implemented by: [TopicReference, TopicReferenceSubtype]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAVirtualMachineAdapter">
            <summary>
            Implemented by: [VirtualMachineAdapter, DialogResponsesAdapter, PackageAdapter, PerkAdapter, QuestAdapter, SceneAdapter]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAVirtualMachineAdapterGetter">
            <summary>
            Implemented by: [VirtualMachineAdapter, DialogResponsesAdapter, PackageAdapter, PerkAdapter, QuestAdapter, SceneAdapter]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IScriptProperty">
            <summary>
            Implemented by: [ScriptObjectProperty, ScriptStringProperty, ScriptIntProperty, ScriptFloatProperty, ScriptBoolProperty, ScriptObjectListProperty, ScriptStringListProperty, ScriptIntListProperty, ScriptFloatListProperty, ScriptBoolListProperty]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IScriptPropertyGetter">
            <summary>
            Implemented by: [ScriptObjectProperty, ScriptStringProperty, ScriptIntProperty, ScriptFloatProperty, ScriptBoolProperty, ScriptObjectListProperty, ScriptStringListProperty, ScriptIntListProperty, ScriptFloatListProperty, ScriptBoolListProperty]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ASpell">
            <summary>
            Implemented by: [LeveledSpell, Shout, Spell]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IASpell">
            <summary>
            Implemented by: [LeveledSpell, Shout, Spell]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IASpellGetter">
            <summary>
            Implemented by: [LeveledSpell, Shout, Spell]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.BookTeachTarget">
            <summary>
            Implemented by: [BookSkill, BookSpell, BookTeachesNothing]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IBookTeachTarget">
            <summary>
            Implemented by: [BookSkill, BookSpell, BookTeachesNothing]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IBookTeachTargetGetter">
            <summary>
            Implemented by: [BookSkill, BookSpell, BookTeachesNothing]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IGameSetting">
            <summary>
            Implemented by: [GameSettingInt, GameSettingFloat, GameSettingString, GameSettingBool]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IGameSettingGetter">
            <summary>
            Implemented by: [GameSettingInt, GameSettingFloat, GameSettingString, GameSettingBool]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IGlobal">
            <summary>
            Implemented by: [GlobalInt, GlobalShort, GlobalFloat]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.BaseLayer">
            <summary>
            Implemented by: [AlphaLayer]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IBaseLayer">
            <summary>
            Implemented by: [AlphaLayer]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IBaseLayerGetter">
            <summary>
            Implemented by: [AlphaLayer]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IMagicEffectArchetype">
            <summary>
            Implemented by: [MagicEffectLightArchetype, MagicEffectBoundArchetype, MagicEffectNpcArchetype, MagicEffectGuideArchetype, MagicEffectSpawnHazardArchetype, MagicEffectSpellArchetype, MagicEffectWerewolfArchetype, MagicEffectVampireArchetype, MagicEffectEnchantmentArchetype, MagicEffectKeywordArchetype]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IMagicEffectArchetypeGetter">
            <summary>
            Implemented by: [MagicEffectLightArchetype, MagicEffectBoundArchetype, MagicEffectNpcArchetype, MagicEffectGuideArchetype, MagicEffectSpawnHazardArchetype, MagicEffectSpellArchetype, MagicEffectWerewolfArchetype, MagicEffectVampireArchetype, MagicEffectEnchantmentArchetype, MagicEffectKeywordArchetype]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ANavigationMeshData">
            <summary>
            Implemented by: [WorldspaceNavigationMeshData, CellNavigationMeshData]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANavigationMeshData">
            <summary>
            Implemented by: [WorldspaceNavigationMeshData, CellNavigationMeshData]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANavigationMeshDataGetter">
            <summary>
            Implemented by: [WorldspaceNavigationMeshData, CellNavigationMeshData]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ANpcLevel">
            <summary>
            Implemented by: [NpcLevel, PcLevelMult]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANpcLevel">
            <summary>
            Implemented by: [NpcLevel, PcLevelMult]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANpcLevelGetter">
            <summary>
            Implemented by: [NpcLevel, PcLevelMult]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ANpcSoundDefinition">
            <summary>
            Implemented by: [NpcInheritSound, NpcSoundTypes]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANpcSoundDefinition">
            <summary>
            Implemented by: [NpcInheritSound, NpcSoundTypes]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IANpcSoundDefinitionGetter">
            <summary>
            Implemented by: [NpcInheritSound, NpcSoundTypes]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPackageData">
            <summary>
            Implemented by: [PackageDataBool, PackageDataInt, PackageDataFloat, PackageDataObjectList, PackageDataLocation, PackageDataTarget, PackageDataTopic]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPackageDataGetter">
            <summary>
            Implemented by: [PackageDataBool, PackageDataInt, PackageDataFloat, PackageDataObjectList, PackageDataLocation, PackageDataTarget, PackageDataTopic]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPackageTarget">
            <summary>
            Implemented by: [PackageTargetSpecificReference, PackageTargetObjectID, PackageTargetObjectType, PackageTargetReference, PackageTargetAlias, PackageTargetUnknown, PackageTargetSelf]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPackageTargetGetter">
            <summary>
            Implemented by: [PackageTargetSpecificReference, PackageTargetObjectID, PackageTargetObjectType, PackageTargetReference, PackageTargetAlias, PackageTargetUnknown, PackageTargetSelf]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPlacedTrap">
            <summary>
            Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPlacedTrapGetter">
            <summary>
            Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IRegionData">
            <summary>
            Implemented by: [RegionSounds, RegionMap, RegionObjects, RegionWeather, RegionGrasses, RegionLand]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IRegionDataGetter">
            <summary>
            Implemented by: [RegionSounds, RegionMap, RegionObjects, RegionWeather, RegionGrasses, RegionLand]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAStoryManagerNode">
            <summary>
            Implemented by: [StoryManagerBranchNode, StoryManagerQuestNode, StoryManagerEventNode]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAStoryManagerNodeGetter">
            <summary>
            Implemented by: [StoryManagerBranchNode, StoryManagerQuestNode, StoryManagerEventNode]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IIdleRelation">
            <summary>
            Implemented by: [ActionRecord, IdleAnimation]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IIdleRelationGetter">
            <summary>
            Implemented by: [ActionRecord, IdleAnimation]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IObjectId">
            <summary>
            Implemented by: [Activator, Ammunition, Armor, Book, Container, Door, Faction, FormList, Furniture, IdleMarker, Ingestible, Key, Light, MiscItem, MoveableStatic, Npc, Projectile, Scroll, Shout, SoundMarker, Spell, Static, TextureSet, Weapon]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IObjectIdGetter">
            <summary>
            Implemented by: [Activator, Ammunition, Armor, Book, Container, Door, Faction, FormList, Furniture, IdleMarker, Ingestible, Key, Light, MiscItem, MoveableStatic, Npc, Projectile, Scroll, Shout, SoundMarker, Spell, Static, TextureSet, Weapon]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IItem">
            <summary>
            Implemented by: [AlchemicalApparatus, Ammunition, Armor, Book, Ingestible, Ingredient, Key, LeveledItem, Light, MiscItem, Scroll, SoulGem, Weapon]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IItemGetter">
            <summary>
            Implemented by: [AlchemicalApparatus, Ammunition, Armor, Book, Ingestible, Ingredient, Key, LeveledItem, Light, MiscItem, Scroll, SoulGem, Weapon]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IComplexLocation">
            <summary>
            Implemented by: [Cell, Worldspace]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IComplexLocationGetter">
            <summary>
            Implemented by: [Cell, Worldspace]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IDialog">
            <summary>
            Implemented by: [DialogResponses, DialogTopic]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IDialogGetter">
            <summary>
            Implemented by: [DialogResponses, DialogTopic]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILocationTargetable">
            <summary>
            Implemented by: [Door, PlacedNpc, PlacedObject]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILocationTargetableGetter">
            <summary>
            Implemented by: [Door, PlacedNpc, PlacedObject]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IOwner">
            <summary>
            Implemented by: [Faction, PlacedNpc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IOwnerGetter">
            <summary>
            Implemented by: [Faction, PlacedNpc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IRelatable">
            <summary>
            Implemented by: [Faction, Race]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IRelatableGetter">
            <summary>
            Implemented by: [Faction, Race]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IRegionTarget">
            <summary>
            Implemented by: [Flora, LandscapeTexture, MoveableStatic, Static, Tree]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IRegionTargetGetter">
            <summary>
            Implemented by: [Flora, LandscapeTexture, MoveableStatic, Static, Tree]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAliasVoiceType">
            <summary>
            Implemented by: [FormList, Npc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAliasVoiceTypeGetter">
            <summary>
            Implemented by: [FormList, Npc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILockList">
            <summary>
            Implemented by: [FormList, Npc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILockListGetter">
            <summary>
            Implemented by: [FormList, Npc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlacedTrapTarget">
            <summary>
            Implemented by: [Hazard, Projectile]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlacedTrapTargetGetter">
            <summary>
            Implemented by: [Hazard, Projectile]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IHarvestTarget">
            <summary>
            Implemented by: [Ingestible, Ingredient, LeveledItem, MiscItem]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IHarvestTargetGetter">
            <summary>
            Implemented by: [Ingestible, Ingredient, LeveledItem, MiscItem]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IKeywordLinkedReference">
            <summary>
            Implemented by: [Keyword, PlacedNpc, PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IKeywordLinkedReferenceGetter">
            <summary>
            Implemented by: [Keyword, PlacedNpc, PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.INpcSpawn">
            <summary>
            Implemented by: [LeveledNpc, Npc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.INpcSpawnGetter">
            <summary>
            Implemented by: [LeveledNpc, Npc]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ISpellSpawn">
            <summary>
            Implemented by: [LeveledSpell, Spell]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ISpellSpawnGetter">
            <summary>
            Implemented by: [LeveledSpell, Spell]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IEmittance">
            <summary>
            Implemented by: [Light, Region]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IEmittanceGetter">
            <summary>
            Implemented by: [Light, Region]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILocationRecord">
            <summary>
            Implemented by: [Location, LocationReferenceType]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILocationRecordGetter">
            <summary>
            Implemented by: [Location, LocationReferenceType]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IEffectRecord">
            <summary>
            Implemented by: [ObjectEffect, Spell]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IEffectRecordGetter">
            <summary>
            Implemented by: [ObjectEffect, Spell]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILinkedReference">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ILinkedReferenceGetter">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlacedSimple">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlacedSimpleGetter">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlacedThing">
            <summary>
            Implemented by: [PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IPlacedThingGetter">
            <summary>
            Implemented by: [PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ISound">
            <summary>
            Implemented by: [SoundDescriptor, SoundMarker]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ISoundGetter">
            <summary>
            Implemented by: [SoundDescriptor, SoundMarker]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.WarmupFallout4">
            <summary>
            A static class to house initialization warmup logic
            </summary>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.WarmupFallout4.Init">
            <summary>
            Will initialize internals in a more efficient way that avoids reflection.
            Not required to call, but can be used to warm up ahead of time.
            <br/><br/>NOTE: Calling this warmup which is for a single game, will require you warm up
            other games in the same fashion.  Use WarmupAll if you want all games to be warmed.
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.ScriptFragments">
            <summary>
            Implemented by: [SceneScriptFragments]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IScriptFragments">
            <summary>
            Implemented by: [SceneScriptFragments]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IScriptFragmentsGetter">
            <summary>
            Implemented by: [SceneScriptFragments]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IOutfitTarget">
            <summary>
            Implemented by: [Armor, LeveledItem]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IOutfitTargetGetter">
            <summary>
            Implemented by: [Armor, LeveledItem]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.APerkEffect">
            <summary>
            Implemented by: [PerkQuestEffect, PerkAbilityEffect, APerkEntryPointEffect]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPerkEffect">
            <summary>
            Implemented by: [PerkQuestEffect, PerkAbilityEffect, APerkEntryPointEffect]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPerkEffectGetter">
            <summary>
            Implemented by: [PerkQuestEffect, PerkAbilityEffect, APerkEntryPointEffect]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPerkEntryPointEffect">
            <summary>
            Implemented by: [PerkEntryPointModifyValue, PerkEntryPointAddRangeToValue, PerkEntryPointModifyActorValue, PerkEntryPointAbsoluteValue, PerkEntryPointAddLeveledItem, PerkEntryPointAddActivateChoice, PerkEntryPointSelectSpell, PerkEntryPointSelectText, PerkEntryPointSetText]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPerkEntryPointEffectGetter">
            <summary>
            Implemented by: [PerkEntryPointModifyValue, PerkEntryPointAddRangeToValue, PerkEntryPointModifyActorValue, PerkEntryPointAbsoluteValue, PerkEntryPointAddLeveledItem, PerkEntryPointAddActivateChoice, PerkEntryPointSelectSpell, PerkEntryPointSelectText, PerkEntryPointSetText]
            </summary>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AcousticSpace(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to AcousticSpace
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on AcousticSpace</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AcousticSpace(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to AcousticSpace
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on AcousticSpace</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ActionRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ActionRecord
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ActionRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ActionRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ActionRecord
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ActionRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Activator(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Activator
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Activator</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Activator(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Activator
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Activator</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ActorValueInformation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ActorValueInformation
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ActorValueInformation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ActorValueInformation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ActorValueInformation
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ActorValueInformation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AddonNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to AddonNode
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on AddonNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AddonNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to AddonNode
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on AddonNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AlchemicalApparatus(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to AlchemicalApparatus
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on AlchemicalApparatus</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AlchemicalApparatus(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to AlchemicalApparatus
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on AlchemicalApparatus</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Ammunition(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Ammunition
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Ammunition</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Ammunition(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Ammunition
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Ammunition</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ANavigationMesh(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ANavigationMesh
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ANavigationMesh</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ANavigationMesh(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ANavigationMesh
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ANavigationMesh</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AnimatedObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to AnimatedObject
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on AnimatedObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AnimatedObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to AnimatedObject
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on AnimatedObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.APlaced(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to APlaced
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on APlaced</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.APlaced(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to APlaced
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on APlaced</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.APlacedTrap(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to APlacedTrap
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on APlacedTrap</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.APlacedTrap(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to APlacedTrap
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on APlacedTrap</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Armor(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Armor
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Armor</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Armor(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Armor
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Armor</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ArmorAddon(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ArmorAddon
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ArmorAddon</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ArmorAddon(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ArmorAddon
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ArmorAddon</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ArtObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ArtObject
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ArtObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ArtObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ArtObject
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ArtObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ASpell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ASpell
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ASpell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ASpell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ASpell
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ASpell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AssociationType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to AssociationType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on AssociationType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AssociationType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to AssociationType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on AssociationType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AStoryManagerNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to AStoryManagerNode
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on AStoryManagerNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.AStoryManagerNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to AStoryManagerNode
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on AStoryManagerNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.BodyPartData(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to BodyPartData
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on BodyPartData</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.BodyPartData(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to BodyPartData
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on BodyPartData</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Book(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Book
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Book</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Book(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Book
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Book</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CameraPath(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to CameraPath
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on CameraPath</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CameraPath(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to CameraPath
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on CameraPath</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CameraShot(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to CameraShot
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on CameraShot</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CameraShot(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to CameraShot
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on CameraShot</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Cell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Cell
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Cell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Cell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Cell
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Cell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CellNavigationMesh(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to CellNavigationMesh
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on CellNavigationMesh</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CellNavigationMesh(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to CellNavigationMesh
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on CellNavigationMesh</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Class(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Class
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Class</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Class(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Class
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Class</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Climate(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Climate
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Climate</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Climate(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Climate
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Climate</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CollisionLayer(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to CollisionLayer
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on CollisionLayer</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CollisionLayer(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to CollisionLayer
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on CollisionLayer</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ColorRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ColorRecord
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ColorRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ColorRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ColorRecord
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ColorRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CombatStyle(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to CombatStyle
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on CombatStyle</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.CombatStyle(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to CombatStyle
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on CombatStyle</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ConstructibleObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ConstructibleObject
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ConstructibleObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ConstructibleObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ConstructibleObject
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ConstructibleObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Container(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Container
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Container</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Container(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Container
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Container</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Debris(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Debris
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Debris</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Debris(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Debris
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Debris</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DefaultObjectManager(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to DefaultObjectManager
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on DefaultObjectManager</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DefaultObjectManager(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to DefaultObjectManager
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on DefaultObjectManager</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogBranch(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to DialogBranch
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on DialogBranch</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogBranch(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to DialogBranch
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on DialogBranch</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogResponses(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to DialogResponses
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on DialogResponses</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogResponses(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to DialogResponses
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on DialogResponses</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogTopic(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to DialogTopic
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on DialogTopic</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogTopic(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to DialogTopic
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on DialogTopic</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogView(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to DialogView
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on DialogView</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DialogView(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to DialogView
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on DialogView</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Door(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Door
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Door</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Door(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Door
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Door</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DualCastData(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to DualCastData
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on DualCastData</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.DualCastData(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to DualCastData
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on DualCastData</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.EffectShader(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to EffectShader
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on EffectShader</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.EffectShader(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to EffectShader
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on EffectShader</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.EncounterZone(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to EncounterZone
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on EncounterZone</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.EncounterZone(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to EncounterZone
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on EncounterZone</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.EquipType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to EquipType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on EquipType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.EquipType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to EquipType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on EquipType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Explosion(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Explosion
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Explosion</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Explosion(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Explosion
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Explosion</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Eyes(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Eyes
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Eyes</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Eyes(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Eyes
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Eyes</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Faction(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Faction
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Faction</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Faction(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Faction
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Faction</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Flora(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Flora
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Flora</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Flora(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Flora
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Flora</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Footstep(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Footstep
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Footstep</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Footstep(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Footstep
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Footstep</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.FootstepSet(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to FootstepSet
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on FootstepSet</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.FootstepSet(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to FootstepSet
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on FootstepSet</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.FormList(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to FormList
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on FormList</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.FormList(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to FormList
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on FormList</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Furniture(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Furniture
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Furniture</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Furniture(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Furniture
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Furniture</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSetting(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSetting
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSetting</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSetting(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSetting
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSetting</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingBool(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingBool
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingBool</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingBool(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingBool
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingBool</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingFloat(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingFloat
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingFloat</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingFloat(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingFloat
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingFloat</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingInt(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingInt
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingInt</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingInt(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingInt
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingInt</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingString(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GameSettingString
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GameSettingString</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GameSettingString(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GameSettingString
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GameSettingString</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Global(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Global
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Global</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Global(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Global
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Global</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GlobalFloat(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GlobalFloat
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GlobalFloat</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GlobalFloat(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GlobalFloat
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GlobalFloat</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GlobalInt(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GlobalInt
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GlobalInt</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GlobalInt(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GlobalInt
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GlobalInt</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GlobalShort(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to GlobalShort
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on GlobalShort</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.GlobalShort(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to GlobalShort
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on GlobalShort</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Grass(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Grass
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Grass</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Grass(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Grass
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Grass</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Hair(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Hair
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Hair</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Hair(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Hair
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Hair</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Hazard(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Hazard
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Hazard</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Hazard(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Hazard
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Hazard</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.HeadPart(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to HeadPart
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on HeadPart</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.HeadPart(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to HeadPart
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on HeadPart</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IdleAnimation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IdleAnimation
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IdleAnimation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IdleAnimation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IdleAnimation
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IdleAnimation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IdleMarker(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IdleMarker
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IdleMarker</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IdleMarker(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IdleMarker
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IdleMarker</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ImageSpace(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ImageSpace
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ImageSpace</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ImageSpace(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ImageSpace
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ImageSpace</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ImageSpaceAdapter(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ImageSpaceAdapter
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ImageSpaceAdapter</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ImageSpaceAdapter(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ImageSpaceAdapter
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ImageSpaceAdapter</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Impact(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Impact
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Impact</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Impact(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Impact
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Impact</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ImpactDataSet(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ImpactDataSet
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ImpactDataSet</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ImpactDataSet(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ImpactDataSet
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ImpactDataSet</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Ingestible(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Ingestible
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Ingestible</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Ingestible(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Ingestible
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Ingestible</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Ingredient(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Ingredient
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Ingredient</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Ingredient(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Ingredient
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Ingredient</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Key(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Key
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Key</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Key(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Key
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Key</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Keyword(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Keyword
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Keyword</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Keyword(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Keyword
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Keyword</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Landscape(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Landscape
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Landscape</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Landscape(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Landscape
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Landscape</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LandscapeTexture(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LandscapeTexture
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LandscapeTexture</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LandscapeTexture(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LandscapeTexture
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LandscapeTexture</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LensFlare(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LensFlare
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LensFlare</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LensFlare(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LensFlare
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LensFlare</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LeveledItem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LeveledItem
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LeveledItem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LeveledItem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LeveledItem
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LeveledItem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LeveledNpc(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LeveledNpc
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LeveledNpc</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LeveledNpc(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LeveledNpc
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LeveledNpc</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LeveledSpell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LeveledSpell
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LeveledSpell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LeveledSpell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LeveledSpell
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LeveledSpell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Light(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Light
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Light</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Light(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Light
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Light</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LightingTemplate(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LightingTemplate
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LightingTemplate</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LightingTemplate(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LightingTemplate
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LightingTemplate</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LoadScreen(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LoadScreen
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LoadScreen</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LoadScreen(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LoadScreen
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LoadScreen</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Location(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Location
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Location</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Location(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Location
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Location</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LocationReferenceType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to LocationReferenceType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on LocationReferenceType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.LocationReferenceType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to LocationReferenceType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on LocationReferenceType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MagicEffect(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MagicEffect
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MagicEffect</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MagicEffect(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MagicEffect
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MagicEffect</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MaterialObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MaterialObject
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MaterialObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MaterialObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MaterialObject
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MaterialObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MaterialType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MaterialType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MaterialType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MaterialType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MaterialType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MaterialType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Message(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Message
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Message</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Message(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Message
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Message</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MiscItem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MiscItem
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MiscItem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MiscItem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MiscItem
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MiscItem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MoveableStatic(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MoveableStatic
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MoveableStatic</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MoveableStatic(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MoveableStatic
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MoveableStatic</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MovementType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MovementType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MovementType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MovementType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MovementType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MovementType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MusicTrack(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MusicTrack
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MusicTrack</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MusicTrack(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MusicTrack
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MusicTrack</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MusicType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to MusicType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on MusicType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.MusicType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to MusicType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on MusicType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.NavigationMeshInfoMap(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to NavigationMeshInfoMap
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on NavigationMeshInfoMap</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.NavigationMeshInfoMap(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to NavigationMeshInfoMap
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on NavigationMeshInfoMap</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Npc(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Npc
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Npc</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Npc(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Npc
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Npc</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ObjectEffect(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ObjectEffect
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ObjectEffect</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ObjectEffect(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ObjectEffect
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ObjectEffect</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Outfit(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Outfit
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Outfit</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Outfit(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Outfit
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Outfit</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Package(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Package
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Package</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Package(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Package
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Package</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Perk(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Perk
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Perk</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Perk(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Perk
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Perk</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedArrow(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedArrow
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedArrow</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedArrow(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedArrow
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedArrow</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedBarrier(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedBarrier
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedBarrier</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedBarrier(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedBarrier
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedBarrier</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedBeam(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedBeam
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedBeam</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedBeam(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedBeam
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedBeam</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedCone(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedCone
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedCone</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedCone(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedCone
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedCone</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedFlame(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedFlame
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedFlame</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedFlame(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedFlame
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedFlame</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedHazard(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedHazard
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedHazard</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedHazard(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedHazard
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedHazard</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedMissile(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedMissile
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedMissile</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedMissile(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedMissile
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedMissile</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedNpc(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedNpc
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedNpc</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedNpc(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedNpc
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedNpc</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedObject
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedObject(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedObject
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedObject</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedTrap(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to PlacedTrap
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on PlacedTrap</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.PlacedTrap(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to PlacedTrap
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on PlacedTrap</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Projectile(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Projectile
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Projectile</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Projectile(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Projectile
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Projectile</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Quest(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Quest
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Quest</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Quest(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Quest
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Quest</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Race(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Race
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Race</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Race(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Race
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Race</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Region(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Region
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Region</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Region(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Region
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Region</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Relationship(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Relationship
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Relationship</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Relationship(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Relationship
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Relationship</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ReverbParameters(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ReverbParameters
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ReverbParameters</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ReverbParameters(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ReverbParameters
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ReverbParameters</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Scene(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Scene
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Scene</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Scene(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Scene
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Scene</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Scroll(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Scroll
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Scroll</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Scroll(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Scroll
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Scroll</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ShaderParticleGeometry(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ShaderParticleGeometry
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ShaderParticleGeometry</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ShaderParticleGeometry(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ShaderParticleGeometry
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ShaderParticleGeometry</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Shout(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Shout
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Shout</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Shout(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Shout
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Shout</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Fallout4MajorRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Fallout4MajorRecord
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Fallout4MajorRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Fallout4MajorRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Fallout4MajorRecord
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Fallout4MajorRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoulGem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to SoulGem
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on SoulGem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoulGem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to SoulGem
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on SoulGem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundCategory(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to SoundCategory
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on SoundCategory</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundCategory(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to SoundCategory
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on SoundCategory</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundDescriptor(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to SoundDescriptor
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on SoundDescriptor</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundDescriptor(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to SoundDescriptor
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on SoundDescriptor</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundMarker(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to SoundMarker
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on SoundMarker</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundMarker(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to SoundMarker
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on SoundMarker</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundOutputModel(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to SoundOutputModel
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on SoundOutputModel</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.SoundOutputModel(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to SoundOutputModel
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on SoundOutputModel</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Spell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Spell
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Spell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Spell(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Spell
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Spell</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Static(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Static
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Static</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Static(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Static
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Static</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.StoryManagerBranchNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to StoryManagerBranchNode
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on StoryManagerBranchNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.StoryManagerBranchNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to StoryManagerBranchNode
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on StoryManagerBranchNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.StoryManagerEventNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to StoryManagerEventNode
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on StoryManagerEventNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.StoryManagerEventNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to StoryManagerEventNode
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on StoryManagerEventNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.StoryManagerQuestNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to StoryManagerQuestNode
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on StoryManagerQuestNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.StoryManagerQuestNode(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to StoryManagerQuestNode
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on StoryManagerQuestNode</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.TalkingActivator(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to TalkingActivator
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on TalkingActivator</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.TalkingActivator(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to TalkingActivator
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on TalkingActivator</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.TextureSet(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to TextureSet
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on TextureSet</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.TextureSet(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to TextureSet
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on TextureSet</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Tree(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Tree
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Tree</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Tree(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Tree
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Tree</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.VisualEffect(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to VisualEffect
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on VisualEffect</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.VisualEffect(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to VisualEffect
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on VisualEffect</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.VoiceType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to VoiceType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on VoiceType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.VoiceType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to VoiceType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on VoiceType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.VolumetricLighting(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to VolumetricLighting
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on VolumetricLighting</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.VolumetricLighting(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to VolumetricLighting
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on VolumetricLighting</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Water(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Water
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Water</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Water(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Water
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Water</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Weapon(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Weapon
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Weapon</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Weapon(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Weapon
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Weapon</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Weather(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Weather
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Weather</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Weather(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Weather
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Weather</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.WordOfPower(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to WordOfPower
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on WordOfPower</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.WordOfPower(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to WordOfPower
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on WordOfPower</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Worldspace(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to Worldspace
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on Worldspace</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.Worldspace(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to Worldspace
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on Worldspace</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.WorldspaceNavigationMesh(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to WorldspaceNavigationMesh
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on WorldspaceNavigationMesh</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.WorldspaceNavigationMesh(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to WorldspaceNavigationMesh
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on WorldspaceNavigationMesh</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IIdleRelation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IIdleRelation
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IIdleRelation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IIdleRelation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IIdleRelation
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IIdleRelation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IObjectId(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IObjectId
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IObjectId</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IObjectId(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IObjectId
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IObjectId</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IItem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IItem
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IItem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IItem(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IItem
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IItem</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IOutfitTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IOutfitTarget
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IOutfitTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IOutfitTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IOutfitTarget
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IOutfitTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IComplexLocation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IComplexLocation
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IComplexLocation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IComplexLocation(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IComplexLocation
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IComplexLocation</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IDialog(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IDialog
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IDialog</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IDialog(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IDialog
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IDialog</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILocationTargetable(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ILocationTargetable
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ILocationTargetable</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILocationTargetable(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ILocationTargetable
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ILocationTargetable</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IOwner(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IOwner
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IOwner</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IOwner(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IOwner
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IOwner</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IRelatable(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IRelatable
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IRelatable</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IRelatable(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IRelatable
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IRelatable</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IRegionTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IRegionTarget
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IRegionTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IRegionTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IRegionTarget
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IRegionTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IAliasVoiceType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IAliasVoiceType
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IAliasVoiceType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IAliasVoiceType(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IAliasVoiceType
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IAliasVoiceType</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILockList(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ILockList
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ILockList</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILockList(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ILockList
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ILockList</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlacedTrapTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IPlacedTrapTarget
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IPlacedTrapTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlacedTrapTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IPlacedTrapTarget
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IPlacedTrapTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IHarvestTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IHarvestTarget
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IHarvestTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IHarvestTarget(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IHarvestTarget
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IHarvestTarget</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IKeywordLinkedReference(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IKeywordLinkedReference
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IKeywordLinkedReference</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IKeywordLinkedReference(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IKeywordLinkedReference
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IKeywordLinkedReference</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.INpcSpawn(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to INpcSpawn
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on INpcSpawn</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.INpcSpawn(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to INpcSpawn
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on INpcSpawn</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ISpellSpawn(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ISpellSpawn
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ISpellSpawn</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ISpellSpawn(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ISpellSpawn
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ISpellSpawn</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IEmittance(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IEmittance
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IEmittance</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IEmittance(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IEmittance
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IEmittance</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILocationRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ILocationRecord
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ILocationRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILocationRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ILocationRecord
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ILocationRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IEffectRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IEffectRecord
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IEffectRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IEffectRecord(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IEffectRecord
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IEffectRecord</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILinkedReference(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ILinkedReference
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ILinkedReference</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ILinkedReference(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ILinkedReference
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ILinkedReference</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlaced(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IPlaced
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IPlaced</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlaced(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IPlaced
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IPlaced</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlacedSimple(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IPlacedSimple
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IPlacedSimple</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlacedSimple(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IPlacedSimple
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IPlacedSimple</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlacedThing(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to IPlacedThing
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on IPlacedThing</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.IPlacedThing(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to IPlacedThing
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on IPlacedThing</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ISound(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Scope a load order query to ISound
            </summary>
            <param name="listings">ModListings to query</param>
            <returns>A typed object to do further queries on ISound</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.TypeOptionSolidifierMixIns.ISound(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Scope a load order query to ISound
            </summary>
            <param name="mods">Mods to query</param>
            <returns>A typed object to do further queries on ISound</returns>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPlaced">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="T:Mutagen.Bethesda.Fallout4.IAPlacedGetter">
            <summary>
            Implemented by: [PlacedNpc, PlacedObject, APlacedTrap]
            </summary>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(Mutagen.Bethesda.Fallout4.IFallout4ModGetter)">
            <summary>
            Creates a Link Cache using a single mod as its link target. <br/>
            Modification of the target Mod is not safe.  Internal caches can become incorrect if 
            modifications occur on content already cached.
            </summary>
            <param name="mod">Mod to construct the package relative to</param>
            <returns>LinkPackage attached to given mod</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(Mutagen.Bethesda.Fallout4.IFallout4ModGetter)">
            <summary>
            Creates a Link Cache using a single mod as its link target.  Mod is allowed to be modified afterwards, but
            this comes at a performance cost of not allowing much caching to be done.  If the mod is not expected to
            be modified afterwards, use ImmutableModLinkCache instead.<br/>
            </summary>
            <param name="mod">Mod to construct the package relative to</param>
            <returns>LinkPackage attached to given mod</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToImmutableLinkCache(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter})">
            <summary>
            Creates a new linking package relative to a load order.<br/>
            Will resolve links to the highest overriding mod containing the record being sought. <br/>
            Modification of the target LoadOrder, or Mods on the LoadOrder is not safe.  Internal caches can become
            incorrect if modifications occur on content already cached.
            </summary>
            <param name="loadOrder">LoadOrder to construct the package relative to</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.Fallout4.IFallout4ModGetter},Mutagen.Bethesda.Fallout4.IFallout4Mod[])">
            <summary>
            Creates a mutable load order link cache by combining an existing immutable load order cache,
            plus a set of mods to be put at the end of the load order and allow to be mutable.
            </summary>
            <param name="immutableBaseCache">LoadOrderCache to use as the immutable base</param>
            <param name="mutableMods">Set of mods to place at the end of the load order, which are allowed to be modified afterwards</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(Mutagen.Bethesda.LoadOrder{Mutagen.Bethesda.IModListing{Mutagen.Bethesda.Fallout4.IFallout4ModGetter}},Mutagen.Bethesda.Fallout4.IFallout4Mod[])">
            <summary>
            Creates a mutable load order link cache by combining an existing immutable load order cache,
            plus a set of mods to be put at the end of the load order and allow to be mutable.
            </summary>
            <param name="immutableBaseCache">LoadOrderCache to use as the immutable base</param>
            <param name="mutableMods">Set of mods to place at the end of the load order, which are allowed to be modified afterwards</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="M:Mutagen.Bethesda.Fallout4.LinkCacheMixIns.ToMutableLinkCache(System.Collections.Generic.IEnumerable{Mutagen.Bethesda.Fallout4.IFallout4ModGetter},Mutagen.Bethesda.Fallout4.IFallout4Mod[])">
            <summary>
            Creates a mutable load order link cache by combining an existing immutable load order cache,
            plus a set of mods to be put at the end of the load order and allow to be mutable.
            </summary>
            <param name="immutableBaseCache">LoadOrderCache to use as the immutable base</param>
            <param name="mutableMods">Set of mods to place at the end of the load order, which are allowed to be modified afterwards</param>
            <returns>LinkPackage attached to given LoadOrder</returns>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: https://github.com/effelo/Mutagen.git</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: release</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: ac970b1d8</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: ac970b1d8d3d06ba09d2ead162c75d1ba5f35c5d</summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>Commit date: 2021-01-07T21:12:24-06:00</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: 0.23.4</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: 0.23.4</summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 23</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 4</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 23</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 4</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Tag</summary>
        </member>
    </members>
</doc>
